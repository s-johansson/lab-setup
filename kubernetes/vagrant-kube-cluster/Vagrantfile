# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure(2) do |config|

  config.vm.box = "ubuntu/focal64"

  config.vm.define "kube-01" do |kube|
    kube.vm.hostname = "kube-01"
    kube.vm.network "private_network", ip: "192.168.56.101"
    kube.vm.provider :virtualbox do |vb|
       vb.memory = 2048
       vb.cpus = 2
    end  
    kube.vm.provision "shell", inline: $script
  end
 
 config.vm.define "kube-02" do |kube|
    kube.vm.hostname = "kube-02"
    kube.vm.network "private_network", ip: "192.168.56.102"
    kube.vm.provider :virtualbox do |vb|
       vb.customize ["modifyvm", :id, "--memory", 2048]
       vb.customize ["modifyvm", :id, "--cpus", 1]
    end
    kube.vm.provision "shell", inline: $script
  end

 config.vm.define "kube-03" do |kube|
    kube.vm.hostname = "kube-03"
    kube.vm.network "private_network", ip: "192.168.56.103"
    kube.vm.provider :virtualbox do |vb|
       vb.customize ["modifyvm", :id, "--memory", 2048]
       vb.customize ["modifyvm", :id, "--cpus", 1]
    end
    kube.vm.provision "shell", inline: $script
  end

  config.vm.define "kube-11" do |kube|
   kube.vm.hostname = "kube-11"
   kube.vm.network "private_network", ip: "192.168.56.111"
   kube.vm.provider :virtualbox do |vb|
      vb.memory = 2048
      vb.cpus = 2
   end  
   kube.vm.provision "shell", inline: $script
 end

config.vm.define "kube-12" do |kube|
   kube.vm.hostname = "kube-12"
   kube.vm.network "private_network", ip: "192.168.56.112"
   kube.vm.provider :virtualbox do |vb|
      vb.customize ["modifyvm", :id, "--memory", 2048]
      vb.customize ["modifyvm", :id, "--cpus", 1]
   end
   kube.vm.provision "shell", inline: $script
 end

config.vm.define "kube-13" do |kube|
   kube.vm.hostname = "kube-13"
   kube.vm.network "private_network", ip: "192.168.56.113"
   kube.vm.provider :virtualbox do |vb|
      vb.customize ["modifyvm", :id, "--memory", 2048]
      vb.customize ["modifyvm", :id, "--cpus", 1]
   end
   kube.vm.provision "shell", inline: $script
 end

 
$script = <<SCRIPT
echo *** I am provisioning...

echo ** Preparing network
#cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
#br_netfilter
#EOF
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sysctl --system

echo ** Installation of Docker
cp /vagrant/docker.service /etc/systemd/system/docker.service
apt-get install ca-certificates curl gnupg lsb-release
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
apt-get update
apt-get install -y docker-ce docker-ce-cli containerd.io

echo ** Installation of Kubernetes
apt-get install -y apt-transport-https ca-certificates curl
cp /vagrant/hosts /etc/hosts
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
cp /vagrant/kubernetes.list /etc/apt/sources.list.d/kubernetes.list
apt-get update 
apt-get install -y kubelet kubeadm kubectl kubernetes-cni
apt-mark hold kubelet kubeadm kubectl kubernetes-cni

#echo ** fix scheduler health reporting
#sed -i '/port=0/d' /etc/kubernetes/manifests/kube-scheduler.yaml
#SCHEDULER_CONTAINER_ID=$(docker container ps | grep scheduler | awk '{print $1}')
#for i in $SCHEDULER_CONTAINER_ID; do docker container restart  $i; done

echo ** Installation of NFS
apt-get install -y nfs-common
SCRIPT

end
